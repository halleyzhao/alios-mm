/*
 * Copyright Â© 2017 Intel Corporation. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef WOOGEEN_BASE_VIDEOENCODERINTERFACE_H_
#define WOOGEEN_BASE_VIDEOENCODERINTERFACE_H_

#include <vector>
#include "mediaformat.h"
#include "videoframebase.h"

namespace woogeen {
namespace base {
/**
  @brief Video encoder interface
*/
class VideoEncoderInterface {
  public:
  /**
    @brief listener for Encoder
   */
  class VideoEncoderListener {
    /**
     @brief triggerd when a new encoded video frame is ready
     @param frame one video frame of encoded video
     @return true after webrtc stack accept the frame
    */
      virtual bool EncodedFrameReady(VideoFrame *frame) = 0;
  };
  public:
  /**
   @brief Destructor
   */
   virtual ~VideoEncoderInterface() {}
  /**
   @brief Initializes the customized video encoder
   @param camera camera object if app has already open it. usually app open camera, start preview,
    then set camera object to encoder pipeline.
    if camera is NULL, encoder pipeline will open camera by itself.
   @param surface preview surface of the recording stream.
    if surface is valid, encoder pipeline will render the recording stream to surface.
   @return true if successful or false if failed
   */
  virtual bool InitEncodeContext(MediaCodec::VideoCodec video_codec, size_t width, size_t height,
                                  uint32_t start_bitrate, uint32_t max_framerate) = 0;

  /**
   @brief connect a listener to Encoder
   @detail EncodeOneFrame() will fail after a listener is set
   @return true if Encoder is able to connect to listener.
   */
  virtual bool SetListener(VideoEncoderListener *listener) = 0;

  /**
   @brief destroy stream for current peer connection
   @return true if successful or false if failed
   */
  virtual bool Release() = 0;
  /**
   @brief Retrieves one video frame for encoder.
   @details webrtc stack should release the frame by @saReleaseVieoEncodeFrame().
    ReleaseVieoEncodeFrame() should be called as early as possible in order that
    the frame can be recycled to encoder for future encoding.
    usually, webrtc-stack may keeps ~3 frames from Encoder.
   @param frame frame pointer to contain the video frame generated by encoder
   @param request_key_frame request a key frame to be generated
   @return true if successful or false if failed
   */
  virtual bool EncodeOneFrame(VideoFrame* &frame, bool request_key_frame) = 0;
  /**
   @brief Generates the customized encoder for each peer connetion
   */
  virtual VideoEncoderInterface* Copy() = 0;
};

}
}

#endif  // WOOGEEN_BASE_VIDEOENCODERINTERFACE_H_
